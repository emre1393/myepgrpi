**------------------------------------------------------------------------------------------------
* @header_start
* WebGrab+Plus ini for grabbing EPG data from TvGuide websites
* @Site: pluto.tv
* @MinSWversion:
* @Revision 1 - [31/08/2014] Francis De Paemeleere
*   - make +16h shows work
* @Revision 0 - [30/07/2014] Francis De Paemeleere
*   - creation
* @Remarks:
* @header_end
**------------------------------------------------------------------------------------------------

site {url=pluto.tv|timezone=UTC|maxdays=1|cultureinfo=en-GB|charset=UTF-8|titlematchfactor=90|keepindexpage|firstshow=1}

urldate.format {daycounter|0}
subpage.format{list|##DATA##T00:00:00.000Z/##DATA##T08:00:00.000Z|##DATA##T08:00:00.000Z/##DATA##T16:00:00.000Z|##DATA##T16:00:00.000Z/##DATA+1##T00:00:00.000Z}
url_index{url|http://cdn-api.prod.pluto.tv/v2/timelines/|subpage|/matrix.json}
index_variable_element.modify {calculate(scope=urlindex format=date,yyyy-MM-dd)|'urldate'}
url_index.modify {replace|##DATA##|'index_variable_element'}
index_variable_element.modify {calculate(format=date,yyyy-MM-dd)|1:0:00 +}
url_index.modify {replace|##DATA+1##|'index_variable_element'}
*url_index{url|http://cdn-api.prod.pluto.tv/v2/timelines/2014-08-01T16:00:00.000Z/2014-08-01T23:00:00.000Z/matrix.json}

url_index.headers    {customheader=Accept-Encoding=gzip,deflate}     * to speedup the downloading of the index pages

index_variable_element.modify {clear}
index_variable_element.modify {addstart|'config_site_id'}
index_showsplit.scrub {multi|"'index_variable_element'":[|"start":|}}|}}]}		* filter only the current channel
index_showsplit.modify {cleanup(removeduplicates=equal)}


index_start.scrub {regex||^\s*"([^"\\]*(?:\\.[^"\\]*)*)"||}
*index_stop.scrub {regex||"stop"\s*:\s*"([^"\\]*(?:\\.[^"\\]*)*)"||}		* can't use stop, because some shows are 24h. so this is converted to 0h by WG++
index_duration.scrub {regex||"duration"\s*:\s*([+-]?\d*)||}
index_duration.modify {calculate(format=D0)|'index_duration' 60000 /}
index_duration.modify {replace('index_duration'>"1439")|'index_duration'|1439}		* ceil to 23:59 (currently max timespan available)
index_duration.modify {calculate(format=time,HH:mm)|'index_duration' 60 /} 			* converted into hh:mm
index_title.scrub {regex||"name"\s*:\s*"([^"\\]*(?:\\.[^"\\]*)*)"||}
index_description.scrub {regex||"description"\s*:\s*"([^"\\]*(?:\\.[^"\\]*)*)"||}

index_start.modify {substring(type=regex)|\d{4}-\d{2}-\d{2}T(\d{2}:\d{2}):\d{2}}
index_stop.modify  {substring(type=regex)|\d{4}-\d{2}-\d{2}T(\d{2}:\d{2}):\d{2}}

index_title.modify         {cleanup(style=jsondecode)}
index_description.modify   {cleanup(style=jsondecode)}


**  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _
**      #####  CHANNEL FILE CREATION (only to create the xxx-channel.xml file)
**
** @auto_xml_channel_start
*url_index{url|http://cdn-api.prod.pluto.tv/v1/channels.json}
*index_site_channel.scrub {regex||"name"\s*:\s*"([^"\\]*(?:\\.[^"\\]*)*)"||}
*index_site_id.scrub {regex||"_id"\s*:\s*"([^"\\]*(?:\\.[^"\\]*)*)"||}
*scope.range {(channellist)|end}
*index_site_id.modify {cleanup(removeduplicates=equal,100 link="index_site_channel")}
*end_scope
** @auto_xml_channel_end
